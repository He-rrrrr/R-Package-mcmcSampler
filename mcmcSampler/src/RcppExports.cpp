// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// adaptMCMC
List adaptMCMC(Function target, arma::vec init_theta, arma::mat covmat, int n_iterations, int adapt_size_start, double acceptance_rate_weight, int acceptance_window, int info, double seedMH, double eps);
RcppExport SEXP _mcmcSampler_adaptMCMC(SEXP targetSEXP, SEXP init_thetaSEXP, SEXP covmatSEXP, SEXP n_iterationsSEXP, SEXP adapt_size_startSEXP, SEXP acceptance_rate_weightSEXP, SEXP acceptance_windowSEXP, SEXP infoSEXP, SEXP seedMHSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type target(targetSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_theta(init_thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covmat(covmatSEXP);
    Rcpp::traits::input_parameter< int >::type n_iterations(n_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type adapt_size_start(adapt_size_startSEXP);
    Rcpp::traits::input_parameter< double >::type acceptance_rate_weight(acceptance_rate_weightSEXP);
    Rcpp::traits::input_parameter< int >::type acceptance_window(acceptance_windowSEXP);
    Rcpp::traits::input_parameter< int >::type info(infoSEXP);
    Rcpp::traits::input_parameter< double >::type seedMH(seedMHSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptMCMC(target, init_theta, covmat, n_iterations, adapt_size_start, acceptance_rate_weight, acceptance_window, info, seedMH, eps));
    return rcpp_result_gen;
END_RCPP
}
// rwMCMC
List rwMCMC(Function target, arma::vec init_theta, arma::mat covmat, int n_iterations);
RcppExport SEXP _mcmcSampler_rwMCMC(SEXP targetSEXP, SEXP init_thetaSEXP, SEXP covmatSEXP, SEXP n_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type target(targetSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_theta(init_thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covmat(covmatSEXP);
    Rcpp::traits::input_parameter< int >::type n_iterations(n_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(rwMCMC(target, init_theta, covmat, n_iterations));
    return rcpp_result_gen;
END_RCPP
}
// sub1
arma::mat sub1(arma::mat x, int i);
RcppExport SEXP _mcmcSampler_sub1(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(sub1(x, i));
    return rcpp_result_gen;
END_RCPP
}
// sub2
arma::mat sub2(arma::mat x, int a, int b);
RcppExport SEXP _mcmcSampler_sub2(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sub2(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// negSubCol
arma::vec negSubCol(arma::vec x, int i);
RcppExport SEXP _mcmcSampler_negSubCol(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(negSubCol(x, i));
    return rcpp_result_gen;
END_RCPP
}
// negSubRow
arma::rowvec negSubRow(arma::rowvec x, int i);
RcppExport SEXP _mcmcSampler_negSubRow(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(negSubRow(x, i));
    return rcpp_result_gen;
END_RCPP
}
// rtnorm_gibbs
NumericVector rtnorm_gibbs(int n, double mu, double sigma, double a, double b);
RcppExport SEXP _mcmcSampler_rtnorm_gibbs(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rtnorm_gibbs(n, mu, sigma, a, b));
    return rcpp_result_gen;
END_RCPP
}
// rtmvnorm_gibbs
arma::mat rtmvnorm_gibbs(int n, arma::vec mu, arma::mat sigma, arma::vec lower, arma::vec upper, arma::vec init_state);
RcppExport SEXP _mcmcSampler_rtmvnorm_gibbs(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP init_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_state(init_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvnorm_gibbs(n, mu, sigma, lower, upper, init_state));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mcmcSampler_adaptMCMC", (DL_FUNC) &_mcmcSampler_adaptMCMC, 10},
    {"_mcmcSampler_rwMCMC", (DL_FUNC) &_mcmcSampler_rwMCMC, 4},
    {"_mcmcSampler_sub1", (DL_FUNC) &_mcmcSampler_sub1, 2},
    {"_mcmcSampler_sub2", (DL_FUNC) &_mcmcSampler_sub2, 3},
    {"_mcmcSampler_negSubCol", (DL_FUNC) &_mcmcSampler_negSubCol, 2},
    {"_mcmcSampler_negSubRow", (DL_FUNC) &_mcmcSampler_negSubRow, 2},
    {"_mcmcSampler_rtnorm_gibbs", (DL_FUNC) &_mcmcSampler_rtnorm_gibbs, 5},
    {"_mcmcSampler_rtmvnorm_gibbs", (DL_FUNC) &_mcmcSampler_rtmvnorm_gibbs, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_mcmcSampler(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
